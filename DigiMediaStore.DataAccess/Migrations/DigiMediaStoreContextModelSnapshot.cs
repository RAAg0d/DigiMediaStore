// <auto-generated />
using System;
using DigiMediaStore.DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DigiMediaStore.DataAccess.Migrations
{
    [DbContext(typeof(DigiMediaStoreContext))]
    partial class DigiMediaStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContentGenre", b =>
                {
                    b.Property<int>("ContentId")
                        .HasColumnType("integer")
                        .HasColumnName("content_id");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    b.HasKey("ContentId", "GenreId")
                        .HasName("content_genres_pkey");

                    b.HasIndex("GenreId");

                    b.ToTable("content_genres", (string)null);
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("content_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContentId"));

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("base_price");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<bool?>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_available");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("ContentId")
                        .HasName("content_pkey");

                    b.HasIndex(new[] { "TypeId" }, "idx_content_type");

                    b.ToTable("content", (string)null);
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.ContentType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("TypeId")
                        .HasName("content_types_pkey");

                    b.HasIndex(new[] { "Name" }, "content_types_name_key")
                        .IsUnique();

                    b.ToTable("content_types", (string)null);
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("GenreId")
                        .HasName("genres_pkey");

                    b.HasIndex(new[] { "Name" }, "genres_name_key")
                        .IsUnique();

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("order_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'pending'::character varying");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("OrderId")
                        .HasName("orders_pkey");

                    b.HasIndex(new[] { "UserId" }, "idx_order_user");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.OrderItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<DateTime?>("AccessExpires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("access_expires");

                    b.Property<int?>("ContentId")
                        .HasColumnType("integer")
                        .HasColumnName("content_id");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<int?>("PriceOptionId")
                        .HasColumnType("integer")
                        .HasColumnName("price_option_id");

                    b.HasKey("ItemId")
                        .HasName("order_items_pkey");

                    b.HasIndex("ContentId");

                    b.HasIndex("PriceOptionId");

                    b.HasIndex(new[] { "OrderId" }, "idx_order_items_order");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("processed_at");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'pending'::character varying");

                    b.HasKey("PaymentId")
                        .HasName("payments_pkey");

                    b.HasIndex("OrderId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.PriceOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("option_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OptionId"));

                    b.Property<int?>("ContentId")
                        .HasColumnType("integer")
                        .HasColumnName("content_id");

                    b.Property<bool>("IsRental")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rental");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<TimeSpan?>("RentalPeriod")
                        .HasColumnType("interval")
                        .HasColumnName("rental_period");

                    b.Property<DateTime?>("ValidFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_from")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_to");

                    b.HasKey("OptionId")
                        .HasName("price_options_pkey");

                    b.HasIndex(new[] { "ContentId" }, "idx_price_options_content");

                    b.ToTable("price_options", (string)null);
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("review_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("ContentId")
                        .HasColumnType("integer")
                        .HasColumnName("content_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId")
                        .HasName("reviews_pkey");

                    b.HasIndex("ContentId");

                    b.HasIndex(new[] { "UserId", "ContentId" }, "reviews_user_id_content_id_key")
                        .IsUnique();

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ContentGenre", b =>
                {
                    b.HasOne("DigiMediaStore.Domain.Models.Content", null)
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .IsRequired()
                        .HasConstraintName("content_genres_content_id_fkey");

                    b.HasOne("DigiMediaStore.Domain.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("content_genres_genre_id_fkey");
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.Content", b =>
                {
                    b.HasOne("DigiMediaStore.Domain.Models.ContentType", "Type")
                        .WithMany("Contents")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("content_type_id_fkey");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.Order", b =>
                {
                    b.HasOne("DigiMediaStore.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("orders_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.OrderItem", b =>
                {
                    b.HasOne("DigiMediaStore.Domain.Models.Content", "Content")
                        .WithMany("OrderItems")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("order_items_content_id_fkey");

                    b.HasOne("DigiMediaStore.Domain.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("order_items_order_id_fkey");

                    b.HasOne("DigiMediaStore.Domain.Models.PriceOption", "PriceOption")
                        .WithMany("OrderItems")
                        .HasForeignKey("PriceOptionId")
                        .HasConstraintName("order_items_price_option_id_fkey");

                    b.Navigation("Content");

                    b.Navigation("Order");

                    b.Navigation("PriceOption");
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.Payment", b =>
                {
                    b.HasOne("DigiMediaStore.Domain.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("payments_order_id_fkey");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.PriceOption", b =>
                {
                    b.HasOne("DigiMediaStore.Domain.Models.Content", "Content")
                        .WithMany("PriceOptions")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("price_options_content_id_fkey");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.Review", b =>
                {
                    b.HasOne("DigiMediaStore.Domain.Models.Content", "Content")
                        .WithMany("Reviews")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("reviews_content_id_fkey");

                    b.HasOne("DigiMediaStore.Domain.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("reviews_user_id_fkey");

                    b.Navigation("Content");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.Content", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("PriceOptions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.ContentType", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.PriceOption", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DigiMediaStore.Domain.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
